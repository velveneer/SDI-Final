{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Defined Infrastructure This repository contains an instruction to setup Hetzner Cloud for the class and all exercises completed in the Software Defined Infrastructure course by Johannes R\u00f6del (jr125). It includes: Source Code: All exercise implementations with configuration files, scripts, and infrastructure-as-code artifacts. Documentation: A detailed description of the exercises, workflows, and lessons learned, accessible through a browser-friendly GUI powered by MkDocs. The purpose of this repository is to provide a reproducible learning environment and an easily navigable documentation platform. ` The MkDocs documentation for this repository is hosted under : GitHub hosted documentation If you want to run it locally on your machine follow the instructions from the README.md in the Github repository. Project Structure \u251c\u2500\u2500 src/ # All work files \u2502 \u251c\u2500\u2500 cloud-setup/ # All exercises from the course \u2502 \u2502 \u2502 \u251c\u2500\u2500 docs/ # Hetzner Cloud Setup for the following exercises documentation (Markdown) \u2502 \u251c\u2500\u2500 exercises/ # All exercises from the course \u2502 \u2502 \u251c\u2500\u2500 exercise-XY/ # One exercise \u2502 \u2502 \u2502 \u251c\u2500\u2500 docs/ # Exercise-specific documentation (Markdown) \u2502 \u2502 \u2502 \u2514\u2500\u2500 src # Exercise source code (scripts, configs, IaC, etc.) \u2502 \u2502 \u251c\u2500\u2500 ... # Additional exercises follow the same structure \u2502 \u2514\u2500\u2500 index.md # Main documentation home (rendered by MkDocs) \u251c\u2500\u2500 mkdocs.yml # MkDocs configuration (theme, navigation, settings) \u2514\u2500\u2500 README.md # Repository overview & setup instructions (this file) Getting Started Clone This Repository git clone https://github.com/velveneer/SDI-Final.git cd SDI-Final","title":"Home"},{"location":"#software-defined-infrastructure","text":"This repository contains an instruction to setup Hetzner Cloud for the class and all exercises completed in the Software Defined Infrastructure course by Johannes R\u00f6del (jr125). It includes: Source Code: All exercise implementations with configuration files, scripts, and infrastructure-as-code artifacts. Documentation: A detailed description of the exercises, workflows, and lessons learned, accessible through a browser-friendly GUI powered by MkDocs. The purpose of this repository is to provide a reproducible learning environment and an easily navigable documentation platform. ` The MkDocs documentation for this repository is hosted under : GitHub hosted documentation If you want to run it locally on your machine follow the instructions from the README.md in the Github repository.","title":"Software Defined Infrastructure"},{"location":"#project-structure","text":"\u251c\u2500\u2500 src/ # All work files \u2502 \u251c\u2500\u2500 cloud-setup/ # All exercises from the course \u2502 \u2502 \u2502 \u251c\u2500\u2500 docs/ # Hetzner Cloud Setup for the following exercises documentation (Markdown) \u2502 \u251c\u2500\u2500 exercises/ # All exercises from the course \u2502 \u2502 \u251c\u2500\u2500 exercise-XY/ # One exercise \u2502 \u2502 \u2502 \u251c\u2500\u2500 docs/ # Exercise-specific documentation (Markdown) \u2502 \u2502 \u2502 \u2514\u2500\u2500 src # Exercise source code (scripts, configs, IaC, etc.) \u2502 \u2502 \u251c\u2500\u2500 ... # Additional exercises follow the same structure \u2502 \u2514\u2500\u2500 index.md # Main documentation home (rendered by MkDocs) \u251c\u2500\u2500 mkdocs.yml # MkDocs configuration (theme, navigation, settings) \u2514\u2500\u2500 README.md # Repository overview & setup instructions (this file)","title":"Project Structure"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#clone-this-repository","text":"git clone https://github.com/velveneer/SDI-Final.git cd SDI-Final","title":"Clone This Repository"},{"location":"cloud-setup/docs/setup/","text":"Hetzner Cloud Setup Technical Background Working with software defined infrastructur`requires a flexible and reproducible environment where infrastructure can be created, modified, and destroyed on demand. A cloud provider offers: On-Demand Resources : Quickly create servers, networks, and other infrastructure components Scalability : Adjust resources dynamically as exercises become more complex Isolation : Work in a safe environment without affecting local systems Collaboration : Share access with teammates while maintaining security and role separation In this course, a cloud platform is required to host virtual servers, configure networking, and deploy automation solutions. Hetzner provides an offer for educational institutions to learn how to use these systems. Related Links Hetzner Registration Ubuntu OpenLDAP Installation Bind 9 Private DNS Server Hetzner Account Registration Visit Hetzner Sign-Up Register using your HdM email address Important It's crucial to use your HdM email to get educational benefits. Enable Two-Factor Authentication (2FA) immediately Warning Mandatory for security Confirm that you register an account in the appropiate Moodle course section. Note Hetzner may request identy verification, but no payment info is needed. If you get asked to put in payment options ignore and skip it.","title":"Hetzner Cloud Setup"},{"location":"cloud-setup/docs/setup/#hetzner-cloud-setup","text":"","title":"Hetzner Cloud Setup"},{"location":"cloud-setup/docs/setup/#technical-background","text":"Working with software defined infrastructur`requires a flexible and reproducible environment where infrastructure can be created, modified, and destroyed on demand. A cloud provider offers: On-Demand Resources : Quickly create servers, networks, and other infrastructure components Scalability : Adjust resources dynamically as exercises become more complex Isolation : Work in a safe environment without affecting local systems Collaboration : Share access with teammates while maintaining security and role separation In this course, a cloud platform is required to host virtual servers, configure networking, and deploy automation solutions. Hetzner provides an offer for educational institutions to learn how to use these systems.","title":"Technical Background"},{"location":"cloud-setup/docs/setup/#related-links","text":"Hetzner Registration Ubuntu OpenLDAP Installation Bind 9 Private DNS Server","title":"Related Links"},{"location":"cloud-setup/docs/setup/#hetzner-account-registration","text":"Visit Hetzner Sign-Up Register using your HdM email address Important It's crucial to use your HdM email to get educational benefits. Enable Two-Factor Authentication (2FA) immediately Warning Mandatory for security Confirm that you register an account in the appropiate Moodle course section. Note Hetzner may request identy verification, but no payment info is needed. If you get asked to put in payment options ignore and skip it.","title":"Hetzner Account Registration"},{"location":"exercises/exercise-01/docs/documentation-01/","text":"First Server Technical Background In a software defined infrastructure environment, creating and managing virtual servers is a foundational skill. This exercise teaches how to: Provision a cloud server Apply basic firewall rules Securely access the server using SSH Understand and verify SSH host keys to prevent security risks Related Links Hetzner Login Hetzner Console ICMP SSH How SSH Works GUI Debian 12 How Firewalls Work Prerequisits Project Access Login in to your Hetzner Account Open the Hetzner Cloud Console over the upper-right menu. Select your the project with your assigned group number (e.g. g11) Open the Setting page and go the Members Options Check if you have the Admin role assigned. Setting up a Firewall In the Cloud Console , navigate to Firewalls \u2192 Create Firewall Add inbound rules for: Port 22 : required for secure shell access ICMP : allows ping for connectivity testing Warning Leave the two inbound rules port 22 and ICMP untouched. Removing port 22 access will lock you out of your server. Name the firewall (e.g., basicFirewallG11) Click Create Firewall Solution Server Creation Go to Create Server in the console. Choose: Image : Debian 12 (default) Type : choose the cheapest available one Add the created firewall Give it a name (e.g. serverG11) Click Create and Buy Note You'll receive an E-Mail containing your server's IP and root password. You may reset root's password in the GUI's rescue tab. Accessing Server via SSH Conntect to the server via a terminal with ssh: ssh root@<your-server-ip Note You can copy the ip address from the Hetzner Console On the first connection you'll see a fingerprint prompt: ssh root@95.216.187.60 The authenticity of host '95.216.187.60 (95.216.187.60)' can't be established. ED25519 key fingerprint is SHA256:vpV7B+l9RLQ+SwTMqtkk7YbICBhyhi2OP780+WVEFMY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? Answer yes in the console to trust the server Note This will save the fingerprint to ~/.ssh/known_hosts for future connections. Important This prevents man-in-the-middle attacks by ensuring you connect to the correct server. After confirming the fingerprint, change the root password in the console: Changing password for root: Current password: New password: Retype new password: Accessing Server via Hetzner Console Hetzner offers a way to access the server over a built-in console inside the webapplication. In the Hetzner GUI got to server view Click the terminal icon >_ Log in with the credentials you received in an email Warning Due to keymapping issues you may need to change your keyboard layout to type the correct characters inside the built-in console.","title":"01 First Server"},{"location":"exercises/exercise-01/docs/documentation-01/#first-server","text":"","title":"First Server"},{"location":"exercises/exercise-01/docs/documentation-01/#technical-background","text":"In a software defined infrastructure environment, creating and managing virtual servers is a foundational skill. This exercise teaches how to: Provision a cloud server Apply basic firewall rules Securely access the server using SSH Understand and verify SSH host keys to prevent security risks","title":"Technical Background"},{"location":"exercises/exercise-01/docs/documentation-01/#related-links","text":"Hetzner Login Hetzner Console ICMP SSH How SSH Works GUI Debian 12 How Firewalls Work","title":"Related Links"},{"location":"exercises/exercise-01/docs/documentation-01/#prerequisits","text":"","title":"Prerequisits"},{"location":"exercises/exercise-01/docs/documentation-01/#project-access","text":"Login in to your Hetzner Account Open the Hetzner Cloud Console over the upper-right menu. Select your the project with your assigned group number (e.g. g11) Open the Setting page and go the Members Options Check if you have the Admin role assigned.","title":"Project Access"},{"location":"exercises/exercise-01/docs/documentation-01/#setting-up-a-firewall","text":"In the Cloud Console , navigate to Firewalls \u2192 Create Firewall Add inbound rules for: Port 22 : required for secure shell access ICMP : allows ping for connectivity testing Warning Leave the two inbound rules port 22 and ICMP untouched. Removing port 22 access will lock you out of your server. Name the firewall (e.g., basicFirewallG11) Click Create Firewall","title":"Setting up a Firewall"},{"location":"exercises/exercise-01/docs/documentation-01/#solution","text":"","title":"Solution"},{"location":"exercises/exercise-01/docs/documentation-01/#server-creation","text":"Go to Create Server in the console. Choose: Image : Debian 12 (default) Type : choose the cheapest available one Add the created firewall Give it a name (e.g. serverG11) Click Create and Buy Note You'll receive an E-Mail containing your server's IP and root password. You may reset root's password in the GUI's rescue tab.","title":"Server Creation"},{"location":"exercises/exercise-01/docs/documentation-01/#accessing-server-via-ssh","text":"Conntect to the server via a terminal with ssh: ssh root@<your-server-ip Note You can copy the ip address from the Hetzner Console On the first connection you'll see a fingerprint prompt: ssh root@95.216.187.60 The authenticity of host '95.216.187.60 (95.216.187.60)' can't be established. ED25519 key fingerprint is SHA256:vpV7B+l9RLQ+SwTMqtkk7YbICBhyhi2OP780+WVEFMY. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? Answer yes in the console to trust the server Note This will save the fingerprint to ~/.ssh/known_hosts for future connections. Important This prevents man-in-the-middle attacks by ensuring you connect to the correct server. After confirming the fingerprint, change the root password in the console: Changing password for root: Current password: New password: Retype new password:","title":"Accessing Server via SSH"},{"location":"exercises/exercise-01/docs/documentation-01/#accessing-server-via-hetzner-console","text":"Hetzner offers a way to access the server over a built-in console inside the webapplication. In the Hetzner GUI got to server view Click the terminal icon >_ Log in with the credentials you received in an email Warning Due to keymapping issues you may need to change your keyboard layout to type the correct characters inside the built-in console.","title":"Accessing Server via Hetzner Console"},{"location":"exercises/exercise-02/docs/documentation-02/","text":"Server Recreation Technical Background When a server is deleted and recreated while using the same IP address, its unique SSH host key changes. SSH clients detect this mismatch and block the connection to prevent potential man-in-the-middle attacks. Understanding why this warning occurs and how to resolve it safely is essential for managing dynamic cloud environments where servers are frequently replaced or re-provisioned. Related Links SSH Hetzner Login Hetzner Console Solution Deletion and recreation of server Delete the current running server with the Hetzner Cloud Console When prompted choose to keep the IPv4 and IPv6 address unassagnied to be reused Create a new server and use the unassigned IP addresses Connecting via SSH When you try to connect to the new server via SSH: ssh root@<your-server-ip> You will get an output in the console containing: ~$ ssh root@<your-server-ip> @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ED25519 key sent by the remote host is SHA256:Dg9+vHl/JYIEgYto5AjlwnttzI4yUcgre0c6hXXKkaQ. Please contact your system administrator. Add correct host key in /home/user/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/user/.ssh/known_hosts:288 Host key for <your-server-ip> has changed and you have requested strict checking. What does that mean and why does it happen? SSH saves server host keys in ~/.ssh/known_hosts. When connecting again, it compares the saved fingerprint with the server\u2019s current fingerprint. If the key differs (because the VM is new), SSH assumes a potential MITM attack and blocks the connection. This behavior is by design to protect against impersonation attacks. How to fix the Host Key Conflict Warning Only do this if you are certain that the server was intentionally recreated and the IP address was reused for the same purpose. You can either remove the old key with the command: ssh-keygen -R <your-server-ip> Note This deletes the old entry. When you reconnect, SSH will ask you to trust the new fingerprint. Or manually edit your Known Host file: Open ~/.ssh/known_hosts in an editor. Remove the line referencing <your-server-ip> Reconnect and accept the new fingerprint Warning Do not copy keys between servers. Each server must have its own unique host key. Always confirm why the host key changed and verify the fingerprint after resolving the conflict.","title":"02 Server Re-Creation"},{"location":"exercises/exercise-02/docs/documentation-02/#server-recreation","text":"","title":"Server Recreation"},{"location":"exercises/exercise-02/docs/documentation-02/#technical-background","text":"When a server is deleted and recreated while using the same IP address, its unique SSH host key changes. SSH clients detect this mismatch and block the connection to prevent potential man-in-the-middle attacks. Understanding why this warning occurs and how to resolve it safely is essential for managing dynamic cloud environments where servers are frequently replaced or re-provisioned.","title":"Technical Background"},{"location":"exercises/exercise-02/docs/documentation-02/#related-links","text":"SSH Hetzner Login Hetzner Console","title":"Related Links"},{"location":"exercises/exercise-02/docs/documentation-02/#solution","text":"","title":"Solution"},{"location":"exercises/exercise-02/docs/documentation-02/#deletion-and-recreation-of-server","text":"Delete the current running server with the Hetzner Cloud Console When prompted choose to keep the IPv4 and IPv6 address unassagnied to be reused Create a new server and use the unassigned IP addresses","title":"Deletion and recreation of server"},{"location":"exercises/exercise-02/docs/documentation-02/#connecting-via-ssh","text":"When you try to connect to the new server via SSH: ssh root@<your-server-ip> You will get an output in the console containing: ~$ ssh root@<your-server-ip> @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ED25519 key sent by the remote host is SHA256:Dg9+vHl/JYIEgYto5AjlwnttzI4yUcgre0c6hXXKkaQ. Please contact your system administrator. Add correct host key in /home/user/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/user/.ssh/known_hosts:288 Host key for <your-server-ip> has changed and you have requested strict checking.","title":"Connecting via SSH"},{"location":"exercises/exercise-02/docs/documentation-02/#what-does-that-mean-and-why-does-it-happen","text":"SSH saves server host keys in ~/.ssh/known_hosts. When connecting again, it compares the saved fingerprint with the server\u2019s current fingerprint. If the key differs (because the VM is new), SSH assumes a potential MITM attack and blocks the connection. This behavior is by design to protect against impersonation attacks.","title":"What does that mean and why does it happen?"},{"location":"exercises/exercise-02/docs/documentation-02/#how-to-fix-the-host-key-conflict","text":"Warning Only do this if you are certain that the server was intentionally recreated and the IP address was reused for the same purpose. You can either remove the old key with the command: ssh-keygen -R <your-server-ip> Note This deletes the old entry. When you reconnect, SSH will ask you to trust the new fingerprint. Or manually edit your Known Host file: Open ~/.ssh/known_hosts in an editor. Remove the line referencing <your-server-ip> Reconnect and accept the new fingerprint Warning Do not copy keys between servers. Each server must have its own unique host key. Always confirm why the host key changed and verify the fingerprint after resolving the conflict.","title":"How to fix the Host Key Conflict"},{"location":"exercises/exercise-03/docs/documentation-03/","text":"Server Security Improvement Technical Background Default cloud servers are often configured for convenience rather than security. Common issues include password-based SSH access, open firewall rules, and outdated software packages. This exercise demonstrates how to improve server security by: Using public key authentication instead of passwords Limiting network access with a minimal firewall configuration Keeping the system up to date Deploying a basic web service (NGINX) under these security constraints Related Links SSH Hetzner Login Hetzner Console ssh-keygen ssh-passphrase scp NGINX wget HTTP How Firewalls Work Solution Creating a Firewall In the Hetzner Cloud Console: Go to Firewalls \u2192 Create Firewall Add one inbound rule: Protocol : ICMP Action : Allow Save the firewall, for example as icmp-only-fw Uploading and Using a Public SSH Key Navigate to Security \u2192 SSH Keys Upload your public SSH key and mark it as default Info This ensures passwordless and more secure authentication. Creating a Server Using Firewall and SSH Key Deploy a new server using the same Image and Type as before Select the icmp-only-fw firewall and your uploaded SSH key After deployment, note the server\u2019s public IP Testing ICMP and SSH Connectivity Run this command in your local terminal: ping <ypur-server-ip> Info The server responds to ICMP packets, confirming that the firewall rule works. Try to connect to your server via SSH: ssh root@<your-server-ip> Note Your connection should time out because port 22 is not allowed by the firewall Allowing SSH In the Hetzner Cloud Console go to Firewalls Edit your created rule and add a new inbound rule: Protocol : TCP Port : 22 Action : Allow Retry the SSH Connection: ssh root@<server-ip> hostname Note This time your login should succed. This should not require a password because the SSH key was used. Updating and Rebooting the Server Run these commands in a terminal on your server: apt update apt upgrade -y aptitude -y upgrade reboot Info This ensures all packages and the kernel are up to date. Installing NGINX on the Server To install the webser NGINX run this commands: apt install nginx -y To verify that the installation was successful use: systemctl status nginx Note The output should show NGINX running and enabled. Local HTTP Test On the server run: wget -O - http://<your-server-ip> Note You should see the NGINX welcome page HTML returned. Open http://<your-server-ip> in your local machine browser Note This should fail because port 80 is still blocked by the firewall Allowing HTTP Access In the Hetzner Cloud Console go to Firewalls Edit your created rule and add a new inbound rule: Protocol : TCP Port : 80 Action : Allow Retry to visit the site in your browser from your local machine. Note Now the NGINX welcome page should load successfully.","title":"03 Server Security Improvement"},{"location":"exercises/exercise-03/docs/documentation-03/#server-security-improvement","text":"","title":"Server Security Improvement"},{"location":"exercises/exercise-03/docs/documentation-03/#technical-background","text":"Default cloud servers are often configured for convenience rather than security. Common issues include password-based SSH access, open firewall rules, and outdated software packages. This exercise demonstrates how to improve server security by: Using public key authentication instead of passwords Limiting network access with a minimal firewall configuration Keeping the system up to date Deploying a basic web service (NGINX) under these security constraints","title":"Technical Background"},{"location":"exercises/exercise-03/docs/documentation-03/#related-links","text":"SSH Hetzner Login Hetzner Console ssh-keygen ssh-passphrase scp NGINX wget HTTP How Firewalls Work","title":"Related Links"},{"location":"exercises/exercise-03/docs/documentation-03/#solution","text":"","title":"Solution"},{"location":"exercises/exercise-03/docs/documentation-03/#creating-a-firewall","text":"In the Hetzner Cloud Console: Go to Firewalls \u2192 Create Firewall Add one inbound rule: Protocol : ICMP Action : Allow Save the firewall, for example as icmp-only-fw","title":"Creating a Firewall"},{"location":"exercises/exercise-03/docs/documentation-03/#uploading-and-using-a-public-ssh-key","text":"Navigate to Security \u2192 SSH Keys Upload your public SSH key and mark it as default Info This ensures passwordless and more secure authentication.","title":"Uploading and Using a Public SSH Key"},{"location":"exercises/exercise-03/docs/documentation-03/#creating-a-server-using-firewall-and-ssh-key","text":"Deploy a new server using the same Image and Type as before Select the icmp-only-fw firewall and your uploaded SSH key After deployment, note the server\u2019s public IP","title":"Creating a Server Using Firewall and SSH Key"},{"location":"exercises/exercise-03/docs/documentation-03/#testing-icmp-and-ssh-connectivity","text":"Run this command in your local terminal: ping <ypur-server-ip> Info The server responds to ICMP packets, confirming that the firewall rule works. Try to connect to your server via SSH: ssh root@<your-server-ip> Note Your connection should time out because port 22 is not allowed by the firewall","title":"Testing ICMP and SSH Connectivity"},{"location":"exercises/exercise-03/docs/documentation-03/#allowing-ssh","text":"In the Hetzner Cloud Console go to Firewalls Edit your created rule and add a new inbound rule: Protocol : TCP Port : 22 Action : Allow Retry the SSH Connection: ssh root@<server-ip> hostname Note This time your login should succed. This should not require a password because the SSH key was used.","title":"Allowing SSH"},{"location":"exercises/exercise-03/docs/documentation-03/#updating-and-rebooting-the-server","text":"Run these commands in a terminal on your server: apt update apt upgrade -y aptitude -y upgrade reboot Info This ensures all packages and the kernel are up to date.","title":"Updating and Rebooting the Server"},{"location":"exercises/exercise-03/docs/documentation-03/#installing-nginx-on-the-server","text":"To install the webser NGINX run this commands: apt install nginx -y To verify that the installation was successful use: systemctl status nginx Note The output should show NGINX running and enabled.","title":"Installing NGINX on the Server"},{"location":"exercises/exercise-03/docs/documentation-03/#local-http-test","text":"On the server run: wget -O - http://<your-server-ip> Note You should see the NGINX welcome page HTML returned. Open http://<your-server-ip> in your local machine browser Note This should fail because port 80 is still blocked by the firewall","title":"Local HTTP Test"},{"location":"exercises/exercise-03/docs/documentation-03/#allowing-http-access","text":"In the Hetzner Cloud Console go to Firewalls Edit your created rule and add a new inbound rule: Protocol : TCP Port : 80 Action : Allow Retry to visit the site in your browser from your local machine. Note Now the NGINX welcome page should load successfully.","title":"Allowing HTTP Access"},{"location":"exercises/exercise-04/docs/documentation-04/","text":"ssh-agent Technical Background Using SSH keys with passphrases significantly increases security by protecting private keys at rest. However, entering the passphrase every time you connect to a remote server quickly becomes tedious, especially when managing multiple servers. The ssh-agent service solves this problem by storing unlocked keys securely in memory during a session, so you only enter the passphrase once. This approach maintains security while improving usability, particularly for frequent administrative tasks. On most modern Linux distributions the ssh-agent is installed as a part of the OpenSSH package. Check before if you're using a minimal distribution and install it in case it's not included. Related Links SSH ssh-keygen ssh-passphrase ssh-agent KeepassXC SSH Agent Integration Solution Starting the SSH Agent Begin by launching the agent in your shell: eval \"$(ssh-agent -s)\" If successful, it returns a process ID like: Agent pid 5678 Setting up the Agent Load your private key into the agent: ssh-add ~/.ssh/id_ed25519 If the key is protected by a passphrase, you will be prompted once: Enter passphrase for /home/user/.ssh/id_ed25519: Identity added: /home/user/.ssh/id_ed25519 Info After this, the agent keeps the unlocked key available for the rest of your session. Confirm that the agent is active: printenv | grep SSH_AUTH_SOCK Note Expected Output: SSH_AUTH_SOCK=/run/user/1000/keyring/ssh Warning The agent must be started for every new shell session unless automated. Warning Forgetting to run ssh-add will still prompt for the passphrase.","title":"04 SSH-Agent"},{"location":"exercises/exercise-04/docs/documentation-04/#ssh-agent","text":"","title":"ssh-agent"},{"location":"exercises/exercise-04/docs/documentation-04/#technical-background","text":"Using SSH keys with passphrases significantly increases security by protecting private keys at rest. However, entering the passphrase every time you connect to a remote server quickly becomes tedious, especially when managing multiple servers. The ssh-agent service solves this problem by storing unlocked keys securely in memory during a session, so you only enter the passphrase once. This approach maintains security while improving usability, particularly for frequent administrative tasks. On most modern Linux distributions the ssh-agent is installed as a part of the OpenSSH package. Check before if you're using a minimal distribution and install it in case it's not included.","title":"Technical Background"},{"location":"exercises/exercise-04/docs/documentation-04/#related-links","text":"SSH ssh-keygen ssh-passphrase ssh-agent KeepassXC SSH Agent Integration","title":"Related Links"},{"location":"exercises/exercise-04/docs/documentation-04/#solution","text":"","title":"Solution"},{"location":"exercises/exercise-04/docs/documentation-04/#starting-the-ssh-agent","text":"Begin by launching the agent in your shell: eval \"$(ssh-agent -s)\" If successful, it returns a process ID like: Agent pid 5678","title":"Starting the SSH Agent"},{"location":"exercises/exercise-04/docs/documentation-04/#setting-up-the-agent","text":"Load your private key into the agent: ssh-add ~/.ssh/id_ed25519 If the key is protected by a passphrase, you will be prompted once: Enter passphrase for /home/user/.ssh/id_ed25519: Identity added: /home/user/.ssh/id_ed25519 Info After this, the agent keeps the unlocked key available for the rest of your session. Confirm that the agent is active: printenv | grep SSH_AUTH_SOCK Note Expected Output: SSH_AUTH_SOCK=/run/user/1000/keyring/ssh Warning The agent must be started for every new shell session unless automated. Warning Forgetting to run ssh-add will still prompt for the passphrase.","title":"Setting up the Agent"},{"location":"exercises/exercise-05/docs/documentation-05/","text":"MI Gitlab access by SSH Technical Background When working with Git repositories, HTTPS access often requires re-entering a username and password or personal access token for every push and pull operation. Using SSH keys eliminates this repetitive authentication by providing a secure, passwordless connection. Once a public key is registered in the GitLab profile, it enables encrypted communication and seamless Git operations without manually typing credentials. Related Links SSH Use SSH keys to communicate with GitLab MI GitLab Solution Adding Public SSH Key to GitLab Output the content from your public key file with the command: cat ~/.ssh/id_ed25519.pub Copy the content Login to your GitLab account and navigate over the GUI to: Profile \u2192 SSH Keys Paste the public key into the field and assign a descriptive title Click Add Key Warning Forgetting to add the key in GitLab results in Permission denied (publickey) errors. Testing SSH Access Try to clone a repository with the SSH URL: git clone git@gitlab.mi.hdm-stuttgart.de:<username>/<repository>.git Info On the first connection, confirm the host fingerprint. If your SSH key has a passphrase, you\u2019ll be prompted to enter it once. Warning If using passphrase-protected keys, ensure an SSH agent is running to avoid repeated prompts. Push changes to the remote repository: Make a change, commit and push it: git add . git commit -m \"Initial commit via SSH\" git push origin main Info The push completes without requiring a username or password because the SSH key handles authentication. Pull a Change Make a remote change and pull to your local git: git pull Info Git synchronizes using the same SSH-secured connection. Info Check your SSH connection directly with ssh -T git@gitlab.mi.hdm-stuttgart.de","title":"05 GitLab SSH Access"},{"location":"exercises/exercise-05/docs/documentation-05/#mi-gitlab-access-by-ssh","text":"","title":"MI Gitlab access by SSH"},{"location":"exercises/exercise-05/docs/documentation-05/#technical-background","text":"When working with Git repositories, HTTPS access often requires re-entering a username and password or personal access token for every push and pull operation. Using SSH keys eliminates this repetitive authentication by providing a secure, passwordless connection. Once a public key is registered in the GitLab profile, it enables encrypted communication and seamless Git operations without manually typing credentials.","title":"Technical Background"},{"location":"exercises/exercise-05/docs/documentation-05/#related-links","text":"SSH Use SSH keys to communicate with GitLab MI GitLab","title":"Related Links"},{"location":"exercises/exercise-05/docs/documentation-05/#solution","text":"","title":"Solution"},{"location":"exercises/exercise-05/docs/documentation-05/#adding-public-ssh-key-to-gitlab","text":"Output the content from your public key file with the command: cat ~/.ssh/id_ed25519.pub Copy the content Login to your GitLab account and navigate over the GUI to: Profile \u2192 SSH Keys Paste the public key into the field and assign a descriptive title Click Add Key Warning Forgetting to add the key in GitLab results in Permission denied (publickey) errors.","title":"Adding Public SSH Key to GitLab"},{"location":"exercises/exercise-05/docs/documentation-05/#testing-ssh-access","text":"Try to clone a repository with the SSH URL: git clone git@gitlab.mi.hdm-stuttgart.de:<username>/<repository>.git Info On the first connection, confirm the host fingerprint. If your SSH key has a passphrase, you\u2019ll be prompted to enter it once. Warning If using passphrase-protected keys, ensure an SSH agent is running to avoid repeated prompts. Push changes to the remote repository: Make a change, commit and push it: git add . git commit -m \"Initial commit via SSH\" git push origin main Info The push completes without requiring a username or password because the SSH key handles authentication. Pull a Change Make a remote change and pull to your local git: git pull Info Git synchronizes using the same SSH-secured connection. Info Check your SSH connection directly with ssh -T git@gitlab.mi.hdm-stuttgart.de","title":"Testing SSH Access"},{"location":"exercises/exercise-06/docs/documentation-06/","text":"SSH Host Hopping Technical Background In many infrastructures, some systems are located in restricted networks and can only be accessed through an intermediate \u201cjump host\u201d. Copying private SSH keys onto each host is considered insecure because it increases the risk of key compromise. A safer approach is SSH agent forwarding, which allows you to reuse your local SSH credentials when hopping through one or more intermediate hosts, without ever transferring your private key. Related Links SSH SSH jump host SSH Agent Forwarding Guide OpenSSH Manual: ForwardAgent Solution SSH Configuration for Agent Forwarding On your local workstation, enable agent forwarding for the intermediate host (Host A). Edit ~/.ssh/config : Host hostA HostName <hostA-address> User root ForwardAgent yes Host hostB HostName <hostB-address> User root Info This ensures your SSH agent is forwarded when connecting to Host A. Before connecting, start the SSH agent and load your private key: eval \"$(ssh-agent -s)\" ssh-add ~/.ssh/id_ed25519 Note You only enter the passphrase once. Using Host Hopping Connect to Host A From your local machine: ssh hostA Info You are now inside Host A while your local SSH agent is available to it. Connecting from Host A to Host B From within Host A: ssh hostB Info This works even though Host B doesn\u2019t have your private key, because the authentication is forwarded from your local workstation. Closing all connections: Exit Host B and then Host A: exit exit Direct Login to Host B Try to connect directly from your workstation to Host B: ssh hostB Warning This fails with: Permission denied (publickey). Host B only allows access through Host A. Reverse Hop from B to A: If you log in to Host B (through Host A) and attempt to connect back to Host A: hostA You will again see: Permission denied (publickey). Info This demonstrates that agent forwarding is one-directional. It allows the initial remote host to use your local agent, but doesn\u2019t cascade to subsequent reverse connections.","title":"06 SSH Host Hopping"},{"location":"exercises/exercise-06/docs/documentation-06/#ssh-host-hopping","text":"","title":"SSH Host Hopping"},{"location":"exercises/exercise-06/docs/documentation-06/#technical-background","text":"In many infrastructures, some systems are located in restricted networks and can only be accessed through an intermediate \u201cjump host\u201d. Copying private SSH keys onto each host is considered insecure because it increases the risk of key compromise. A safer approach is SSH agent forwarding, which allows you to reuse your local SSH credentials when hopping through one or more intermediate hosts, without ever transferring your private key.","title":"Technical Background"},{"location":"exercises/exercise-06/docs/documentation-06/#related-links","text":"SSH SSH jump host SSH Agent Forwarding Guide OpenSSH Manual: ForwardAgent","title":"Related Links"},{"location":"exercises/exercise-06/docs/documentation-06/#solution","text":"","title":"Solution"},{"location":"exercises/exercise-06/docs/documentation-06/#ssh-configuration-for-agent-forwarding","text":"On your local workstation, enable agent forwarding for the intermediate host (Host A). Edit ~/.ssh/config : Host hostA HostName <hostA-address> User root ForwardAgent yes Host hostB HostName <hostB-address> User root Info This ensures your SSH agent is forwarded when connecting to Host A. Before connecting, start the SSH agent and load your private key: eval \"$(ssh-agent -s)\" ssh-add ~/.ssh/id_ed25519 Note You only enter the passphrase once.","title":"SSH Configuration for Agent Forwarding"},{"location":"exercises/exercise-06/docs/documentation-06/#using-host-hopping","text":"Connect to Host A From your local machine: ssh hostA Info You are now inside Host A while your local SSH agent is available to it. Connecting from Host A to Host B From within Host A: ssh hostB Info This works even though Host B doesn\u2019t have your private key, because the authentication is forwarded from your local workstation. Closing all connections: Exit Host B and then Host A: exit exit Direct Login to Host B Try to connect directly from your workstation to Host B: ssh hostB Warning This fails with: Permission denied (publickey). Host B only allows access through Host A. Reverse Hop from B to A: If you log in to Host B (through Host A) and attempt to connect back to Host A: hostA You will again see: Permission denied (publickey). Info This demonstrates that agent forwarding is one-directional. It allows the initial remote host to use your local agent, but doesn\u2019t cascade to subsequent reverse connections.","title":"Using Host Hopping"},{"location":"exercises/exercise-07/docs/documentation-07/","text":"","title":"Exercise 07"},{"location":"exercises/exercise-08/docs/documentation-08/","text":"","title":"Exercise 08"},{"location":"exercises/exercise-09/docs/documentation-09/","text":"","title":"Exercise 09"},{"location":"exercises/exercise-10/docs/documentation-10/","text":"","title":"Exercise 10"},{"location":"exercises/exercise-11/docs/documentation-11/","text":"","title":"Exercise 11"},{"location":"exercises/exercise-12/docs/documentation-12/","text":"","title":"Exercise 12"},{"location":"exercises/exercise-13/docs/documentation-13/","text":"","title":"Exercise 13"},{"location":"exercises/exercise-14/docs/documentation-14/","text":"","title":"Exercise 14"},{"location":"exercises/exercise-15/docs/documentation-15/","text":"","title":"Exercise 15"},{"location":"exercises/exercise-16/docs/documentation-16/","text":"","title":"Exercise 16"},{"location":"exercises/exercise-17/docs/documentation-17/","text":"","title":"Exercise 17"},{"location":"exercises/exercise-18/docs/documentation-18/","text":"","title":"Exercise 18"},{"location":"exercises/exercise-19/docs/documentation-19/","text":"","title":"Exercise 19"},{"location":"exercises/exercise-20/docs/documentation-20/","text":"","title":"Exercise 20"},{"location":"exercises/exercise-21/docs/documentation-21/","text":"","title":"Exercise 21"},{"location":"exercises/exercise-22/docs/documentation-22/","text":"","title":"Exercise 22"},{"location":"exercises/exercise-23/docs/documentation-23/","text":"","title":"Exercise 23"},{"location":"exercises/exercise-24/docs/documentation-24/","text":"","title":"Exercise 24"},{"location":"exercises/exercise-25/docs/documentation-25/","text":"","title":"Exercise 25"},{"location":"exercises/exercise-26/docs/documentation-26/","text":"","title":"Exercise 26"}]}